import streamlit as st
from recognition.model import load_and_train_model, predict_digit
from recognition.image_utils import load_and_preprocess_image
from recognition.explainability import explain_prediction
from recognition.feedback import log_feedback
import plotly.express as px
import numpy as np

st.set_page_config(page_title="Digit Recognizer", layout="wide", initial_sidebar_state="expanded")

# –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å: –Ω–µ–∂–Ω–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω –∏ —Ä–æ–∑–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');

    html, body, .stApp {
        background-color: #e0f7fa !important;
        font-family: 'Roboto', sans-serif;
        color: #333;
    }

    .stButton>button {
        background: linear-gradient(90deg, #f472b6, #f9a8d4);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-size: 16px;
        font-weight: 700;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }

    .stButton>button:hover {
        transform: translateY(-3px) scale(1.05);
        background: linear-gradient(90deg, #ec4899, #f472b6);
        box-shadow: 0 6px 20px rgba(0,0,0,0.3);
    }

    .stFileUploader {
        background: rgba(255,255,255,0.8);
        border-radius: 10px;
        padding: 15px;
        backdrop-filter: blur(5px);
    }

    .sidebar .sidebar-content {
        background: rgba(255, 255, 255, 0.7);
        border-radius: 10px;
        padding: 20px;
    }

    .main-title {
        background: rgba(255,255,255,0.9);
        padding: 20px;
        border-radius: 16px;
        text-align: center;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        margin-bottom: 30px;
    }

    .result-card {
        background: rgba(255,255,255,0.9);
        padding: 20px;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }
    </style>
""", unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("üìñ –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    st.write("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π—Ç–µ —Ä—É–∫–æ–ø–∏—Å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã —Å –ø–æ–º–æ—â—å—é –ò–ò! –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
    st.image("bg.gif", use_container_width=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown("""
<div class='main-title'>
    <h1>‚ú® –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä</h1>
    <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (PNG, JPG) —Å —Ü–∏—Ñ—Ä–æ–π, –∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</p>
</div>
""", unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_file = st.file_uploader(
    "üì§ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:",
    type=["png", "jpg", "jpeg"],
    help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PNG, JPG, JPEG."
)

if uploaded_file is not None and st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"):
    uploaded_file = None
    st.experimental_rerun()

if uploaded_file is not None:
    with st.spinner("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
        try:
            col1, col2 = st.columns([1, 1])

            with col1:
                img, img_array = load_and_preprocess_image(uploaded_file)
                st.image(img, caption="üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

            with col2:
                model = load_and_train_model()
                prediction, confidence = predict_digit(model, img_array.reshape(1, -1))
                with st.container():
                    st.markdown("<div class='result-card'>", unsafe_allow_html=True)
                    st.subheader(f"üî¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction}")
                    st.markdown(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏**: {confidence:.2%}")
                    st.progress(confidence)
                    st.markdown("</div>", unsafe_allow_html=True)

            # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            st.subheader("üß† –ö–∞–∫ –º–æ–¥–µ–ª—å —Å–¥–µ–ª–∞–ª–∞ –≤—ã–±–æ—Ä?")
            explanation = explain_prediction(model, img_array)
            fig = px.imshow(
                explanation.reshape(8, 8),
                color_continuous_scale="Viridis",
                title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π"
            )
            fig.update_layout(width=400, height=400, margin=dict(l=10, r=10, t=50, b=10))
            st.plotly_chart(fig)

            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            with st.expander("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"):
                correct_digit = st.selectbox("–ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É:", list(range(10)))
                if st.button("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"):
                    with st.spinner("–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à –æ—Ç–∑—ã–≤..."):
                        log_feedback(uploaded_file.name, prediction, correct_digit)
                        st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üéâ")
                        st.balloons()

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
else:
    st.info("üëâ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ.")
