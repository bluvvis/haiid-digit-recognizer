import streamlit as st
from recognition.model import load_and_train_model, predict_digit
from recognition.image_utils import load_and_preprocess_image
from recognition.explainability import explain_prediction
from recognition.feedback import log_feedback
import plotly.express as px
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –∏ —Å—Ç–∏–ª–µ–π
st.set_page_config(page_title="Digit Recognizer", layout="wide", initial_sidebar_state="expanded")
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
    .main {
        background: url('https://www.transparenttextures.com/patterns/dark-mosaic.png'), linear-gradient(to right, #6b7280, #9ca3af);
        background-size: cover, auto;
        animation: subtle-move 10s infinite alternate;
    }
    .stButton>button {
        background-color: #f97316; 
        color: white; 
        border-radius: 10px; 
        padding: 10px;
        font-family: 'Roboto', sans-serif;
    }
    .stButton>button:hover {
        background-color: #ea580c; 
        transform: scale(1.05); 
        transition: 0.2s;
    }
    .stSelectbox {
        background-color: #ffffff; 
        border-radius: 5px;
        font-family: 'Roboto', sans-serif;
    }
    h1, h2, h3 {
        color: #fefcbf; 
        font-family: 'Roboto', sans-serif; 
        text-shadow: 2px 2px 4px rgba(0,0,0,0.4);
    }
    .sidebar .sidebar-content {
        background: #1f2937; 
        color: #ffffff;
        border-right: 2px solid #4b5563;
    }
    .stSpinner .spinner {
        border: 3px solid #f97316; 
        border-top: 3px solid #ffffff; 
        border-radius: 50%; 
        width: 30px; 
        height: 30px; 
        animation: spin 1s linear infinite;
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    @keyframes subtle-move {
        0% { background-position: 0% 50%; }
        100% { background-position: 100% 50%; }
    }
    </style>
""", unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("–û –ø—Ä–æ–µ–∫—Ç–µ")
    st.write("–†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä—É–∫–æ–ø–∏—Å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –º–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç!")
    # GIF –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.markdown("""
        <div style='text-align: center;'>
            <img src='https://media.giphy.com/media/3o7TKrHrTLiH0zE0HC/giphy.gif' alt='Animated Digit' width='150'>
            <p>–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–∞</p>
        </div>
    """, unsafe_allow_html=True)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
st.title("üé® –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä")
st.write("–ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É–∑–Ω–∞–π, —á—Ç–æ –≤–∏–¥–∏—Ç –º–æ–¥–µ–ª—å!")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ü–∏—Ñ—Ä–æ–π", type=["png", "jpg", "jpeg"], help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PNG, JPG, JPEG")

if uploaded_file is not None:
    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
        try:
            col1, col2 = st.columns(2)
            
            with col1:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img, img_array = load_and_preprocess_image(uploaded_file)
                st.image(img, caption="–¢–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
            
            with col2:
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                model = load_and_train_model()
                prediction, confidence = predict_digit(model, img_array.reshape(1, -1))
                st.subheader(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: **{prediction}**")
                st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: **{confidence:.2%}**")
                
                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                st.progress(confidence)
    
            # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
            st.subheader("üîç –ü–æ—á–µ–º—É –º–æ–¥–µ–ª—å —Ç–∞–∫ —Ä–µ—à–∏–ª–∞?")
            explanation = explain_prediction(model, img_array)
            fig = px.imshow(explanation.reshape(8, 8), color_continuous_scale="Inferno", title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π")
            fig.update_layout(width=400, height=400)
            st.plotly_chart(fig)
    
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            with st.expander("üí¨ –î–∞–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"):
                correct_digit = st.selectbox("–ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ, –≤—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É:", list(range(10)))
                if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"):
                    with st.spinner("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞..."):
                        log_feedback(uploaded_file.name, prediction, correct_digit)
                        st.success("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
                        st.balloons()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

# –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
st.info("üëâ –ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ `samples/` –∏–ª–∏ —Å–≤–æ—ë —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
