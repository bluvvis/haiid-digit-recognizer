import streamlit as st
from recognition.model import load_and_train_model, predict_digit
from recognition.image_utils import load_and_preprocess_image
from recognition.explainability import explain_prediction
from recognition.feedback import log_feedback
import plotly.express as px
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –∏ —Å—Ç–∏–ª–µ–π
st.set_page_config(page_title="Digit Recognizer", layout="wide", initial_sidebar_state="expanded")
st.markdown("""
<style>
    .main {background: url('https://www.transparenttextures.com/patterns/cubes.png'), linear-gradient(to right, #a1c4fd, #c2e9fb);}
    .stButton>button:hover {background-color: #45a049; transform: scale(1.05); transition: 0.2s;}
    h1 {font-family: 'Roboto', sans-serif; text-shadow: 2px 2px 4px rgba(0,0,0,0.2);}
    .stSpinner {border: 3px solid #4CAF50; border-radius: 50%; animation: spin 1s linear infinite;}
    @keyframes spin {0% {transform: rotate(0deg);} 100% {transform: rotate(360deg);}}
    </style>
""", unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("–û –ø—Ä–æ–µ–∫—Ç–µ")
    st.write("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä—É–∫–æ–ø–∏—Å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –æ–±—ä—è—Å–Ω—è–µ—Ç, –∫–∞–∫ –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ. –ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π!")
    st.image("https://via.placeholder.com/150", caption="–ü—Ä–∏–º–µ—Ä —Ü–∏—Ñ—Ä—ã")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
st.title("üé® –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä")
st.write("–ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ª—É—á–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —É–∑–Ω–∞–π, –∫–∞–∫ –º–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç!")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ü–∏—Ñ—Ä–æ–π", type=["png", "jpg", "jpeg"], help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PNG, JPG, JPEG")

if uploaded_file is not None:
    try:
        col1, col2 = st.columns(2)
        
        with col1:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img, img_array = load_and_preprocess_image(uploaded_file)
            st.image(img, caption="–¢–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
        
        with col2:
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            model = load_and_train_model()
            prediction, confidence = predict_digit(model, img_array.reshape(1, -1))
            st.subheader(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: **{prediction}**")
            st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: **{confidence:.2%}**")
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            st.progress(confidence)

        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
        st.subheader("üîç –ü–æ—á–µ–º—É –º–æ–¥–µ–ª—å —Ç–∞–∫ —Ä–µ—à–∏–ª–∞?")
        explanation = explain_prediction(model, img_array)
        fig = px.imshow(explanation.reshape(8, 8), color_continuous_scale="Viridis", title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π")
        fig.update_layout(width=400, height=400)
        st.plotly_chart(fig)

        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        with st.expander("üí¨ –î–∞–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"):
            correct_digit = st.selectbox("–ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ, –≤—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É:", list(range(10)))
            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"):
                log_feedback(uploaded_file.name, prediction, correct_digit)
                st.success("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
                st.balloons()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {e}")

# –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
st.info("üëâ –ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ `samples/` –∏–ª–∏ —Å–≤–æ—ë —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
